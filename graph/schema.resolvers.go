package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"io"
	"log"
	"math/rand"
	"os"
	"path"

	"github.com/99designs/gqlgen/graphql"
	"github.com/rokiyama/example-gqlgen-file-upload/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	rand := rand.Int()
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", rand),
		User: &model.User{ID: input.UserID, Name: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// SingleUpload is the resolver for the singleUpload field.
func (r *mutationResolver) SingleUpload(ctx context.Context, file graphql.Upload) (string, error) {
	log.Printf("%#v", file)
	v, err := io.ReadAll(file.File)
	if err != nil {
		return "", err
	}
	log.Printf("%s", v)
	return "success", nil
}

// MultipleUpload is the resolver for the multipleUpload field.
func (r *mutationResolver) MultipleUpload(ctx context.Context, files []*graphql.Upload) (string, error) {
	if files == nil {
		log.Print("files is nil")
		return "empty", nil
	}
	log.Printf("%#v", files)
	for _, file := range files {
		path := path.Join("tmp", file.Filename)
		outFile, err := os.Create(path)
		if err != nil {
			return "", err
		}
		defer outFile.Close()
		if _, err := io.Copy(outFile, file.File); err != nil {
			return "", err
		}
		log.Printf("wrote: %s, file=%#v", path, file)
	}
	return "success", nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
